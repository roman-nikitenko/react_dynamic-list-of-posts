{"version":3,"sources":["utils/fetchClient.ts","components/NewCommentForm.tsx","components/Loader/Loader.tsx","components/CommentList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","components/PostsList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","selectedPost","setPostComments","postComments","useState","fieldName","setFieldName","fieldEmail","setFieldEmail","fieldComment","setFieldComment","validName","setValidName","validEmail","setValidEmail","validComment","setValidComment","isButtonLoad","setIsButtonLoad","onSubmit","event","preventDefault","formError","newComment","postId","id","name","email","trim","length","className","htmlFor","type","placeholder","classNames","value","onChange","target","e","onClick","Loader","CommentList","deleteComment","map","comment","href","PostDetails","postSelectedId","isShowForm","setIsShowForm","showSideBar","isLoaderPost","setIsLoaderPost","useEffect","comments","title","commentId","prevState","filter","c","UserSelector","users","setDropDownOpen","dropDownOpen","setUserSelectedId","userSelectedId","setPostSelectedId","selectedUser","setSelectedUser","dropDownRef","useRef","handleUserKeyPress","useCallback","current","contains","window","addEventListener","removeEventListener","ref","role","user","chooseUserHandler","PostsList","setShowSideBar","setSelectedPost","posts","setPosts","isLoader","setIsLoader","isErrorPosts","setIsErrorPosts","userId","postsFromServer","Array","isArray","Error","catch","closeButton","post","openButton","App","setUsers","usersFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3922030.chunk.js","sourcesContent":["import { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const removeComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const postComment = (data: Comment): Promise<Comment> => {\n  return client.post('/comments', data);\n};\n","import React, {\n  Dispatch,\n  FormEvent, SetStateAction,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { postComment } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post;\n  postComments: Comment[];\n  setPostComments: Dispatch<SetStateAction<Comment[]>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  setPostComments,\n  postComments,\n}) => {\n  const [fieldName, setFieldName] = useState('');\n  const [fieldEmail, setFieldEmail] = useState('');\n  const [fieldComment, setFieldComment] = useState('');\n  const [validName, setValidName] = useState(false);\n  const [validEmail, setValidEmail] = useState(false);\n  const [validComment, setValidComment] = useState(false);\n  const [isButtonLoad, setIsButtonLoad] = useState(false);\n\n  const nameChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFieldName(event.target.value);\n    setValidName(false);\n  };\n\n  const emailChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFieldEmail(event.target.value);\n    setValidEmail(false);\n  };\n\n  const commentChangeHandler = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setFieldComment(e.target.value);\n    setValidComment(false);\n  };\n\n  const clearHandler = () => {\n    setValidComment(false);\n    setValidName(false);\n    setValidEmail(false);\n    setFieldName('');\n    setFieldEmail('');\n    setFieldComment('');\n  };\n\n  const submitFormHandler = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    let formError = false;\n\n    const newComment = {\n      postId: selectedPost.id,\n      name: fieldName,\n      email: fieldEmail,\n      body: fieldComment,\n    };\n\n    if (!fieldName.trim().length) {\n      setValidName(true);\n      formError = true;\n    }\n\n    if (!fieldEmail.trim().length) {\n      setValidEmail(true);\n      formError = true;\n    }\n\n    if (!fieldComment.trim().length) {\n      setValidComment(true);\n      formError = true;\n    }\n\n    if (!formError) {\n      setIsButtonLoad(true);\n      postComment(newComment)\n        .then(response => {\n          setPostComments([...postComments, response]);\n          setIsButtonLoad(false);\n        });\n    }\n\n    setFieldComment('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={submitFormHandler}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': validName,\n            })}\n            value={fieldName}\n            onChange={nameChangeHandler}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {validName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {validName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': validEmail,\n            })}\n            value={fieldEmail}\n            onChange={emailChangeHandler}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {validEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {validEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': validComment,\n            })}\n            value={fieldComment}\n            onChange={commentChangeHandler}\n          />\n        </div>\n\n        {validComment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isButtonLoad,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearHandler}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postComments: Comment[] | null | undefined;\n  deleteComment: (comment: Comment) => void\n};\n\nexport const CommentList: React.FC<Props> = ({\n  postComments,\n  deleteComment,\n}) => {\n  return (\n    <>\n      { postComments?.length === 0 ? (\n        <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n          No comments yet\n        </p>\n      ) : (\n        <>\n          <p className=\"title is-4\">Comments:</p>\n          {postComments?.map(comment => (\n            <article\n              key={comment.id}\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n            >\n              <div className=\"message-header\">\n                <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => {\n                    deleteComment(comment);\n                  }}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n        </>\n      ) }\n    </>\n  );\n};\n","import React, {\n  Dispatch, SetStateAction, useEffect, useState,\n} from 'react';\nimport { NewCommentForm } from './NewCommentForm';\nimport { getComments, removeComment } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { CommentList } from './CommentList';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  postSelectedId: number;\n  selectedPost: Post;\n  isShowForm: boolean;\n  setIsShowForm: Dispatch<SetStateAction<boolean>>;\n  showSideBar: boolean;\n};\nexport const PostDetails: React.FC<Props> = ({\n  postSelectedId,\n  selectedPost,\n  isShowForm,\n  setIsShowForm,\n  showSideBar,\n}) => {\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isLoaderPost, setIsLoaderPost] = useState(false);\n\n  useEffect(() => {\n    setIsLoaderPost(true);\n    getComments(postSelectedId)\n      .then(comments => {\n        setPostComments(comments);\n        setIsLoaderPost(false);\n      });\n  }, [postSelectedId]);\n\n  const openFormHandler = () => {\n    setIsShowForm(true);\n  };\n\n  const deleteComment = (comment: Comment) => {\n    if (!comment.id) {\n      return;\n    }\n\n    removeComment(comment.id);\n\n    setPostComments(prevState => (\n      prevState.filter(c => c.id !== comment.id)\n    ));\n  };\n\n  return (\n    <>\n      {showSideBar && (\n        <div className=\"content\" data-cy=\"PostDetails\">\n          <div className=\"block\">\n            <h2 data-cy=\"PostTitle\">\n              {`#${selectedPost?.id}: ${selectedPost?.title}`}\n            </h2>\n            ≠\n            <p data-cy=\"PostBody\">\n              {selectedPost?.body}\n            </p>\n          </div>\n          <div className=\"block\">\n            {isLoaderPost ? <Loader /> : (\n              <CommentList\n                postComments={postComments}\n                deleteComment={deleteComment}\n              />\n            )}\n\n            {!isShowForm && !isLoaderPost && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={openFormHandler}\n              >\n                Write a comment\n              </button>\n            )}\n          </div>\n          {isShowForm\n            && (\n              <NewCommentForm\n                selectedPost={selectedPost}\n                setPostComments={setPostComments}\n                postComments={postComments}\n              />\n            )}\n        </div>\n      )}\n    </>\n  );\n};\n","import React, {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect, useRef,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[] | null | undefined\n  setDropDownOpen: Dispatch<SetStateAction<boolean>>;\n  dropDownOpen: boolean;\n  setUserSelectedId: Dispatch<SetStateAction<number>>;\n  userSelectedId: number;\n  setPostSelectedId: Dispatch<SetStateAction<number>>\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  setDropDownOpen,\n  dropDownOpen,\n  setUserSelectedId,\n  userSelectedId,\n  setPostSelectedId,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User>();\n  const dropDownRef = useRef<HTMLDivElement>(null);\n  const showOptions = () => {\n    setDropDownOpen(prevState => !prevState);\n  };\n\n  const handleUserKeyPress = useCallback(event => {\n    if (dropDownRef.current && !dropDownRef.current.contains(event.target)) {\n      setDropDownOpen(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('click', handleUserKeyPress);\n\n    return () => {\n      window.removeEventListener('click', handleUserKeyPress);\n    };\n  }, [handleUserKeyPress]);\n\n  const chooseUserHandler = (user: User) => {\n    setSelectedUser(user);\n    setUserSelectedId(user.id);\n    setPostSelectedId(0);\n    setDropDownOpen(false);\n  };\n\n  return (\n    <div\n      ref={dropDownRef}\n      data-cy=\"UserSelector\"\n      id=\"dropdown-menu\"\n      className={classNames('dropdown', {\n        'is-active': dropDownOpen,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={showOptions}\n        >\n          {!selectedUser\n            ? <span>Choose a user</span>\n            : <span>{selectedUser.name}</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users && (\n            users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': userSelectedId === user.id,\n                })}\n                key={user.id}\n                onClick={() => {\n                  chooseUserHandler(user);\n                }}\n              >\n                {user.name}\n              </a>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, {\n  Dispatch,\n  SetStateAction,\n  useEffect,\n  useState,\n} from 'react';\nimport { Post } from '../types/Post';\nimport { getPosts } from '../utils/fetchClient';\nimport { Loader } from './Loader';\n\ntype Props = {\n  userSelectedId: number;\n  setShowSideBar: Dispatch<SetStateAction<boolean>>;\n  postSelectedId: number;\n  setPostSelectedId: Dispatch<SetStateAction<number>>;\n  setSelectedPost: Dispatch<SetStateAction<Post | undefined>>;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userSelectedId,\n  setShowSideBar,\n  postSelectedId,\n  setPostSelectedId,\n  setSelectedPost,\n}) => {\n  const [posts, setPosts] = useState<Post[] | null>();\n  const [isLoader, setIsLoader] = useState(false);\n  const [isErrorPosts, setIsErrorPosts] = useState(false);\n\n  useEffect(() => {\n    setIsLoader(true);\n    getPosts(userSelectedId)\n      .then(postsFromServer => {\n        if (!Array.isArray(postsFromServer)) {\n          throw new Error('load error');\n        }\n\n        setIsLoader(false);\n        setPosts(postsFromServer);\n        setIsErrorPosts(false);\n      })\n      .catch(() => {\n        setPosts([]);\n        setIsErrorPosts(true);\n        setIsLoader(false);\n      });\n\n    setShowSideBar(false);\n    setIsErrorPosts(false);\n  }, [userSelectedId]);\n\n  const closeButton = () => {\n    setShowSideBar(false);\n    setPostSelectedId(0);\n  };\n\n  const openButton = (post: Post) => {\n    setShowSideBar(true);\n    setPostSelectedId(post.id);\n    setSelectedPost(post);\n  };\n\n  return (\n    <>\n      {isErrorPosts && (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"PostsLoadingError\"\n        >\n          Something went wrong!\n        </div>\n      )}\n\n      {isLoader ? <Loader /> : (\n        <div data-cy=\"PostsList\">\n          {!isErrorPosts && (\n            <>\n              {posts?.length === 0 && (\n                <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                  No posts yet\n                </div>\n              )}\n            </>\n          )}\n          {posts?.length !== 0 && (\n            <>\n              <p className=\"title\">Posts:</p>\n              <table\n                className=\"table is-fullwidth is-striped is-hoverable is-narrow\"\n              >\n                <thead>\n                  <tr className=\"has-background-link-light\">\n                    <th>#</th>\n                    <th>Title</th>\n                    <th>&nbsp;</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n\n                  {posts?.map(post => (\n                    <tr key={post.id} data-cy=\"Post\">\n                      <td data-cy=\"PostId\">{post.id}</td>\n                      <td data-cy=\"PostTitle\">\n                        {post.title}\n                      </td>\n                      <td className=\"has-text-right is-vcentered\">\n                        {postSelectedId === post.id ? (\n                          <button\n                            type=\"button\"\n                            data-cy=\"PostButton\"\n                            className=\"button is-link\"\n                            onClick={closeButton}\n                          >\n                            Close\n                          </button>\n                        ) : (\n                          <button\n                            type=\"button\"\n                            data-cy=\"PostButton\"\n                            className=\"button is-link is-light\"\n                            onClick={() => openButton(post)}\n                          >\n                            Open\n                          </button>\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { getUsers } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { PostsList } from './components/PostsList';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [showSideBar, setShowSideBar] = useState(false);\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [dropDownOpen, setDropDownOpen] = useState(false);\n  const [userSelectedId, setUserSelectedId] = useState(0);\n  const [postSelectedId, setPostSelectedId] = useState(0);\n  const [selectedPost, setSelectedPost] = useState<Post>();\n  const [isShowForm, setIsShowForm] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => {\n        setUsers(usersFromServer);\n      });\n  }, []);\n\n  useEffect(() => {\n    setIsShowForm(false);\n  }, [postSelectedId, userSelectedId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  setDropDownOpen={setDropDownOpen}\n                  dropDownOpen={dropDownOpen}\n                  setUserSelectedId={setUserSelectedId}\n                  userSelectedId={userSelectedId}\n                  setPostSelectedId={setPostSelectedId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!userSelectedId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {userSelectedId !== 0\n                  && (\n                    <PostsList\n                      userSelectedId={userSelectedId}\n                      setShowSideBar={setShowSideBar}\n                      postSelectedId={postSelectedId}\n                      setPostSelectedId={setPostSelectedId}\n                      setSelectedPost={setSelectedPost}\n                    />\n                  )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': showSideBar,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  showSideBar={showSideBar}\n                  isShowForm={isShowForm}\n                  postSelectedId={postSelectedId}\n                  selectedPost={selectedPost}\n                  setIsShowForm={setIsShowForm}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}